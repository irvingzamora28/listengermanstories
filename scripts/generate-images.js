#!/usr/bin/env node

require('dotenv').config()

const { GoogleGenAI, Modality } = require('@google/genai')
const fs = require('fs').promises
const sharp = require('sharp')
const path = require('path')
const yargs = require('yargs/yargs')
const { hideBin } = require('yargs/helpers')

// CLI configuration
const argv = yargs(hideBin(process.argv))
  .option('promptFile', {
    alias: 'p',
    description: 'Path to the JSON file containing image prompts',
    type: 'string',
    demandOption: true,
  })
  .help()
  .alias('help', 'h').argv

// Initialize Google GenAI
const genAI = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY })
const MODEL_NAME = process.env.GOOGLE_IMAGE_MODEL || 'gemini-2.0-flash-preview-image-generation'

async function generateImage(prompt) {
  try {
    console.log('Attempting to generate image with prompt:', prompt)
    const model = MODEL_NAME
    let base64Image = null
    if (model.startsWith('gemini')) {
      // Gemini 2.0 Flash Preview Image Generation
      const response = await genAI.models.generateContent({
        model,
        contents: prompt,
        config: { responseModalities: [Modality.TEXT, Modality.IMAGE] },
      })
      const candidates = response.candidates || []
      if (candidates.length === 0) throw new Error('No candidates received in response')
      for (const part of candidates[0].content.parts) {
        if (part.inlineData && part.inlineData.data) {
          base64Image = part.inlineData.data
          break
        }
      }
      if (!base64Image) throw new Error('No image data found in Gemini response.')
    } else if (model.startsWith('imagen')) {
      // Imagen 3
      const response = await genAI.models.generateImages({
        model,
        prompt,
        config: { numberOfImages: 1 },
      })
      if (!response.generatedImages || response.generatedImages.length === 0) {
        throw new Error('No images generated by Imagen 3.')
      }
      base64Image = response.generatedImages[0].image.imageBytes
      if (!base64Image) throw new Error('No image data found in Imagen 3 response.')
    } else {
      throw new Error('Unknown or unsupported model: ' + model)
    }
    return base64Image
  } catch (error) {
    console.error('Error generating image:', error)
    return null
  }
}

async function saveBase64Image(base64Data, outputPath) {
  try {
    const base64Image = base64Data.replace(/^data:image\/\w+;base64,/, '')
    const imageBuffer = Buffer.from(base64Image, 'base64')

    const outputDir = path.dirname(outputPath)
    await fs.mkdir(outputDir, { recursive: true })

    await sharp(imageBuffer).webp({ quality: 80 }).toFile(outputPath)

    console.log(`Image saved successfully to ${outputPath}`)
    return true
  } catch (error) {
    console.error('Error saving image:', error)
    return false
  }
}

async function processImagePrompts() {
  try {
    const promptsData = JSON.parse(await fs.readFile(argv.promptFile, 'utf8'))
    const { story_title, images } = promptsData
    console.log(`Processing images for story: ${story_title}`)

    for (const imageData of images) {
      let { chapter_number, prompt, image_path } = imageData
      image_path = image_path.trim()
      console.log(`\nGenerating image for Chapter ${chapter_number}...`)

      const base64Image = await generateImage(prompt)
      if (!base64Image) {
        console.error(`Failed to generate image for Chapter ${chapter_number}`)
        continue
      }

      const outputPath = path.join(process.cwd(), 'public', image_path)
      await saveBase64Image(base64Image, outputPath)
    }

    console.log('\nImage generation complete!')
  } catch (error) {
    console.error('Error processing image prompts:', error)
    process.exit(1)
  }
}

// Check for API key
if (!process.env.GEMINI_API_KEY) {
  console.error('Error: GEMINI_API_KEY environment variable is not set')
  process.exit(1)
}

// Run the script
processImagePrompts()
